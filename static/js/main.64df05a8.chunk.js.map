{"version":3,"sources":["Algorithms/Regression.ts","Components/Input.tsx","Components/Output.tsx","Components/Loading.tsx","App.tsx","store/Data.ts","store/AppState.ts","store/store.ts","index.tsx"],"names":["Regression","functionString","inputData","alpha","iterations","starting","xValues","yValues","data","m","function","a","b","steps","getSteps","aCoord","bCoord","zCoord","forEach","step","push","cost","i","length","evaluate","x","sumForAllXY","f","params","sum","y","calculateCostSurface","Math","round","row","getRegressionLine","xCoord","yCoord","getLatex","toTex","calculate","absoluteDifference","parse","toString","join","aFunc","derivative","bFunc","console","log","this","Input","typesToOptions","Linear","Exponential","Quadratic","Custom","dispatch","useDispatch","useState","text","setText","error","setError","regressionEquation","setRegressionEquation","options","setOptions","setStarting","showAdvanced","setShowAdvanced","custom","setCustom","handleOptions","event","label","value","formattedInput","formatInput","parseInt","Number","type","appState","showInput","showLoading","showOutput","regression","input","split","map","line","number","parseFloat","className","style","maxWidth","id","Dropdown","fluid","selection","onChange","target","textContent","defaultValue","minWidth","Checkbox","checked","onClick","size","placeholder","disabled","Message","Button","color","Output","props","costSurface","setCostSurface","setSteps","useEffect","CS","s","undefined","Plot","createPlotlyComponent","Plotly","regressionLineData","useSelector","state","Data","outputData","PlotRef","useRef","name","mode","width","marker","layout","title","config","staticPlot","latexEquation","Header","values","ref","height","z","opacity","Loading","margin","App","AppState","initialData","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64df05a8.chunk.js","sourcesContent":["import { derivative, MathNode, parse } from \"mathjs\";\r\n\r\nclass Regression {\r\n  protected xValues: number[];\r\n  protected yValues: number[];\r\n  // x and y values\r\n  protected data: number[][];\r\n  // length of x/y\r\n  protected m: number;\r\n  protected iterations: number;\r\n  protected alpha: number;\r\n\r\n  // mathjs function, format that we are trying to achieve\r\n  protected function: MathNode;\r\n  protected functionString: string;\r\n\r\n  // parameter 1:a 2:b\r\n  protected a: number;\r\n  protected b: number;\r\n\r\n  // array of [a,b]\r\n  protected steps: number[][];\r\n\r\n  constructor(\r\n    functionString: string,\r\n    inputData: number[][],\r\n    alpha: number,\r\n    iterations: number,\r\n    starting:[number,number]=[0,0]\r\n  ) {\r\n    console.log({ functionString, inputData, iterations, alpha });\r\n    // Function used: E.g. a*x +b\r\n    this.functionString = functionString;\r\n    this.xValues = inputData[0];\r\n    this.yValues = inputData[1];\r\n    this.m = inputData[0].length;\r\n    this.data = inputData;\r\n    this.a = starting[0];\r\n    this.b = starting[1];\r\n    this.iterations = iterations;\r\n    this.alpha = alpha;\r\n\r\n    this.steps = [];\r\n\r\n    // Parses the string function to a mathjs Mathnode\r\n    this.function = parse(functionString);\r\n  }\r\n\r\n  getSteps = ():number[][] =>{\r\n    let aCoord:number[] = []\r\n    let bCoord:number[] = []\r\n    let zCoord:number[] = []\r\n    this.steps.forEach(step => {\r\n      aCoord.push(step[0])\r\n      bCoord.push(step[1])\r\n      zCoord.push(this.cost(step[0],step[1]))\r\n    });\r\n    return [aCoord,bCoord,zCoord]\r\n  }\r\n\r\n  // evaluates the cost of using parameters a and b\r\n  cost = (a: number, b: number):number => {\r\n    let cost: number = 0;\r\n    for (let i = 0; i < this.xValues.length; i++) {\r\n      cost +=\r\n        (this.yValues[i] -\r\n          this.function.evaluate({ a: a, b: b, x: this.xValues[i] })) **\r\n        2;\r\n    }\r\n    return cost;\r\n  };\r\n\r\n  sumForAllXY = (f: MathNode, params: any) => {\r\n    let sum = 0;\r\n    for (let i = 0; i < this.xValues.length; i++) {\r\n      sum += f.evaluate({ ...params, x: this.xValues[i], y: this.yValues[i] });\r\n    }\r\n    return sum;\r\n  };\r\n  calculateCostSurface = () => {\r\n    let aCoord = [];\r\n    let bCoord = [];\r\n    let zCoord = [];\r\n    let range = 5\r\n    // need to iterate through b then a, becaause plotly selects y then x????\r\n    for (\r\n      let b = Math.round(this.b)-range;\r\n      b < Math.round(this.b) + range + 1;\r\n      b++\r\n    ) {\r\n      let row = []\r\n      bCoord.push(b);\r\n      for (\r\n        let a = Math.round(this.a) - range;\r\n        a < Math.round(this.a)+range + 1;\r\n        a++\r\n      ) {\r\n        if (b==Math.round(this.b)-range){\r\n          aCoord.push(a);\r\n        }\r\n        row.push(this.cost(a, b));\r\n        // zCoord.push(this.cost(a,b))\r\n      }\r\n      zCoord.push(row)\r\n    }\r\n    return [aCoord, bCoord, zCoord];\r\n  };\r\n  getRegressionLine = (): number[][] => {\r\n    let xCoord:number[] = [];\r\n    let yCoord:number[] = [];\r\n    this.xValues.forEach(x => {\r\n      xCoord.push(x);\r\n      yCoord.push(this.function.evaluate({ a:this.a,b:this.b,x: x }));\r\n    });\r\n    return [xCoord, yCoord];\r\n  };\r\n  getLatex = ():string => {\r\n    return this.function.toTex();\r\n  }\r\n  calculate = (): number[] => {\r\n    let absoluteDifference: MathNode = parse(\r\n      [\"((\", this.function.toString(), \"-y)^2)/2\"].join(\"\")\r\n    );\r\n    let aFunc: MathNode = derivative(absoluteDifference, \"a\");\r\n    let bFunc: MathNode = derivative(absoluteDifference, \"b\");\r\n    console.log(aFunc.toString());\r\n    console.log(bFunc.toString());\r\n\r\n    for (let i = 0; i < this.iterations; i++) {\r\n      // console.log(this.cost(this.a,this.b))\r\n      // console.log(this.a,this.b)\r\n      this.a -=\r\n        this.alpha *\r\n        (1 / this.m) *\r\n        this.sumForAllXY(aFunc, { a: this.a, b: this.b });\r\n      this.b -=\r\n        this.alpha *\r\n        (1 / this.m) *\r\n        this.sumForAllXY(bFunc, { a: this.a, b: this.b });\r\n      this.steps.push([this.a, this.b]);\r\n    }\r\n    console.log(this.steps)\r\n    console.log(this.a, this.b);\r\n    return [Math.round(this.a*100)/100, Math.round(this.b*100)/100];\r\n  };\r\n}\r\n\r\nexport default Regression;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { ReactElement, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  Container,\r\n  Dropdown,\r\n  DropdownItemProps,\r\n  Header,\r\n  Message,\r\n  Input as InputSemantic,\r\n  Checkbox,\r\n} from \"semantic-ui-react\";\r\n\r\nimport Regression from \"../Algorithms/Regression\";\r\nimport { RootState } from \"../store/store\";\r\n\r\nimport \"./Input.css\";\r\n\r\n\r\nimport { parse } from \"mathjs\";\r\n\r\ninterface Props {}\r\n\r\nexport default function Input({}: Props): ReactElement {\r\n  const regressionTypes: DropdownItemProps[] = [\r\n    { text: \"Linear\", value: \"(a*x)+b\" },\r\n    { text: \"Exponential\", value: \"a*(b^x)\" },\r\n    { text: \"Quadratic\", value: \"(a*(x^2)) + b\" },\r\n    { text: \"Custom\", value: \"Custom\" },\r\n    // { text: \"Logarithmic\",va},\r\n  ];\r\n  const typesToOptions: { [key: string]: any } = {\r\n    Linear: { alpha: \"0.01\", iterations: \"3000\" },\r\n    Exponential: { alpha: \"0.005\", iterations: \"4000\" },\r\n    Quadratic: { alpha: \"0.005\", iterations: \"4000\" },\r\n    Custom: { alpha: \"0.001\", iterations: '5000' },\r\n  };\r\n\r\n  const textAreaPlaceholder: string = \"x followed by y: \\n0,1,2,3,4,5\\n0,1,2,3,4,5\";\r\n  // redux dispatch:\r\n  const dispatch = useDispatch();\r\n  // text area text:\r\n  let [text, setText] = useState<string>(\"\");\r\n  let [error, setError] = useState<string>(\"\");\r\n  let [regressionEquation, setRegressionEquation] = useState<string>(\"(a*x)+b\");\r\n  let [options, setOptions] = useState({\r\n    alpha: typesToOptions[\"Linear\"].alpha,\r\n    iterations: typesToOptions[\"Linear\"].iterations,\r\n  });\r\n  let [starting, setStarting] = useState<[string, string]>([\"0\", \"0\"]);\r\n  let [showAdvanced,setShowAdvanced] = useState<boolean>(false);\r\n  let [custom,setCustom] = useState<boolean>(false)\r\n\r\n  let handleTextAreaChange = (event: any) => {\r\n    setText(event.target.value);\r\n  };\r\n  let handleDropdown = (event: any, data: any) => {\r\n    if (event.target.textContent === \"Custom\"){\r\n      setCustom(true)\r\n      setRegressionEquation(\"\");\r\n    }else{\r\n      setRegressionEquation(data.value);\r\n      setCustom(false)\r\n    }\r\n    setOptions(typesToOptions[event.target.textContent]);\r\n  };\r\n  let handleOptions = (event: any, data: any) => {\r\n    console.log({ event, data });\r\n    switch (data.label) {\r\n      case \"Starting A\":\r\n        setStarting([data.value, starting[1]]);\r\n        break;\r\n      case \"Starting B\":\r\n        setStarting([starting[0], data.value]);\r\n        break;\r\n      case \"alpha\":\r\n        setOptions({ ...options, alpha: data.value });\r\n        break;\r\n      case \"iterations\":\r\n        setOptions({ ...options, iterations: data.value });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  let calculate = async () => {\r\n    // Formatting + Input checking:\r\n    let formattedInput: number[][] = formatInput(text);\r\n    if (formattedInput.length !== 2) {\r\n      setError(\"Invalid Input, Please try again\");\r\n      return;\r\n    }\r\n    if (formattedInput[0].length !== formattedInput[1].length) {\r\n      setError(\"Make sure length of x and y are the same! Please try again\");\r\n      return;\r\n    }\r\n    try {\r\n      parseInt(options.iterations)\r\n      Number(options.alpha)\r\n      Number(starting[0])\r\n      Number(starting[1])\r\n    } catch (error) {\r\n      setError(\"Invalid Input, Please try again\");\r\n      return;\r\n    }\r\n    try{\r\n      parse(regressionEquation)\r\n    }catch(error){\r\n      setError(\"Invalid Custom function\")\r\n      return\r\n    }\r\n    // show loading screen\r\n    dispatch({\r\n      type: \"setAppState\",\r\n      appState: {\r\n        showInput: false,\r\n        showLoading: true,\r\n        showOutput: false,\r\n      },\r\n    });\r\n    // intialize regression class with all the options\r\n    let regression: Regression = new Regression(\r\n      regressionEquation,\r\n      formattedInput,\r\n      Number(options.alpha),\r\n      Number(options.iterations),\r\n      [Number(starting[0]),Number(starting[1])]\r\n    );\r\n    dispatch({ type: \"setInputData\", inputData: formattedInput });\r\n    dispatch({\r\n      type: \"setRegression\",\r\n      regression: regression,\r\n    });\r\n  };\r\n\r\n  let formatInput = (input: string): number[][] => {\r\n    try {\r\n      // split string by \\n to get an array of lines\r\n      let lines = input.split(\"\\n\");\r\n      let numberLines = lines.map((line) => {\r\n        // Split line by commas\r\n        let splitLine = line.split(\",\");\r\n        // convert each value from a string to a number\r\n        let numberLine = splitLine.map((number) => parseFloat(number));\r\n        return numberLine;\r\n      });\r\n      return numberLines;\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flexStartVertically\">\r\n      <div className=\"flexAroundHorizontally\" style={{maxWidth:\"1000px\"}} id=\"inputs\">\r\n        <Dropdown\r\n          fluid\r\n          selection\r\n          options={regressionTypes}\r\n          onChange={handleDropdown}\r\n          // set linear as default\r\n          defaultValue=\"(a*x)+b\"\r\n          style={{minWidth:\"200px\"}}\r\n        />\r\n        <Checkbox label = \"Show advanced settings\" checked = {showAdvanced} onClick = {()=>setShowAdvanced(!showAdvanced)}/>\r\n        {showAdvanced?(<div>\r\n        <InputSemantic\r\n          label=\"alpha\"\r\n          value={options.alpha}\r\n          onChange={handleOptions}\r\n          size={\"small\"}\r\n        />\r\n        <InputSemantic\r\n          label=\"iterations\"\r\n          value={options.iterations}\r\n          onChange={handleOptions}\r\n        />\r\n        <InputSemantic\r\n          label=\"Starting A\"\r\n          value={starting[0]}\r\n          onChange={handleOptions}\r\n        />\r\n        <InputSemantic\r\n          label=\"Starting B\"\r\n          value={starting[1]}\r\n          onChange={handleOptions}\r\n        />\r\n\r\n        </div>):<div/>}\r\n      </div>\r\n      <div className=\"flexAroundHorizontally\">\r\n        <InputSemantic label={custom?\"Custom Equation\":\"Equation\"} placeholder=\"(a*x) + b\" onChange={(event,data)=>setRegressionEquation(data.value)} value={regressionEquation} disabled={!custom} />\r\n      </div>\r\n      <div className=\"flexAroundHorizontally\">\r\n        <textarea\r\n          placeholder={textAreaPlaceholder}\r\n          value={text}\r\n          onChange={handleTextAreaChange}\r\n        />\r\n      </div>\r\n      {error === \"\" ? (\r\n        <div />\r\n      ) : (\r\n        <div className=\"flexAroundHorizontally\">\r\n          <Message error>{error}</Message>\r\n        </div>\r\n      )}\r\n      <div className=\"flexAroundHorizontally buttonContainer\">\r\n        <Button color=\"teal\" onClick={calculate}>\r\n          Calculate\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport Plotly from \"plotly.js-gl3d-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\n\r\nimport { InlineMath, BlockMath } from \"react-katex\";\r\nimport \"katex/dist/katex.min.css\";\r\n\r\nimport { RootState } from \"src/store/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { CircleLoader, ClimbingBoxLoader } from \"react-spinners\";\r\n\r\ninterface Props {}\r\n\r\nconst Output = (props: Props) => {\r\n  const [costSurface, setCostSurface] = useState<any[]>([]);\r\n  const [steps, setSteps] = useState<number[][]>([]);\r\n  useEffect(() => {\r\n    console.log(\"calculating cost surface...\");\r\n    let CS = regression?.calculateCostSurface();\r\n    let s = regression?.getSteps();\r\n    if (CS != undefined && s != undefined) {\r\n      console.log({ CS, s });\r\n      setCostSurface(CS);\r\n      setSteps(s);\r\n    }\r\n    // PlotRef?.current?.scrollIntoView({behavior:\"smooth\"});\r\n  }, []);\r\n  const Plot = createPlotlyComponent(Plotly);\r\n\r\n  const regressionLineData = useSelector(\r\n    (state: RootState) => state.Data.regressionLineData\r\n  );\r\n  const inputData = useSelector((state: RootState) => state.Data.inputData);\r\n  const outputData = useSelector((state: RootState) => state.Data.outputData);\r\n  const regression = useSelector((state: RootState) => state.Data.regression);\r\n\r\n  const PlotRef = useRef<HTMLDivElement>(null)\r\n\r\n  return (\r\n    <div className=\"flexStartVertically\">\r\n      <Plot\r\n        data={[\r\n          {\r\n            name: \"regression line\",\r\n            x: regressionLineData[0],\r\n            y: regressionLineData[1],\r\n            type: \"scatter\",\r\n            mode: \"lines\",\r\n            line: {\r\n              color: \"rgb(219, 64, 82)\",\r\n              width: 2,\r\n            },\r\n          },\r\n          {\r\n            name: \"data\",\r\n            type: \"scatter\",\r\n            x: inputData[0],\r\n            y: inputData[1],\r\n            mode: \"markers\",\r\n            marker: { color: \"green\" },\r\n          },\r\n        ]}\r\n        layout={{\r\n          // width:,\r\n          title: \"Data with regression\",\r\n        }}\r\n        config={{ staticPlot: true }}\r\n      />\r\n      <BlockMath>{outputData.latexEquation}</BlockMath>\r\n      <div className=\"flexAroundHorizontally\" >\r\n        <Header>\r\n          a = {outputData.values[0]} b = {outputData.values[1]}\r\n        </Header>\r\n      </div>\r\n      <div ref={PlotRef} style={{width:\"100%\"}} className=\"flexAroundHorizontally\">\r\n      {costSurface.length == 0 ? (\r\n        <div className = \"flexAroundHorizontally\" style={{width:\"100%\",height:\"auto\"}}>\r\n          {/* <ClimbingBoxLoader size={60} color={\"teal\"} /> */}\r\n        </div>\r\n      ) : (\r\n        <Plot\r\n          data={[\r\n            {\r\n              name: \"surface\",\r\n              x: costSurface[0],\r\n              y: costSurface[1],\r\n              z: costSurface[2],\r\n              type: \"surface\",\r\n              opacity: 0.5,\r\n\r\n            },\r\n            {\r\n              name:\"Path taken for gradient descent\",\r\n              type: \"scatter3d\",\r\n              mode: \"lines\",\r\n              x: steps[0],\r\n              y: steps[1],\r\n              z: steps[2],\r\n              line: {\r\n                color:\"teal\",\r\n                width: 9,\r\n              },\r\n            },\r\n          ]}\r\n          layout={{\r\n            title: \"Cost Surface\",\r\n            \"xaxis.title\": \"A\",\r\n            \"yaxis.title\": \"B\",\r\n          }}\r\n          style={{width:\"100%\",height:\"100%\"}}\r\n        />\r\n      )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Output;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { RootState } from \"../store/store\";\r\n\r\ninterface Props {}\r\n\r\nconst Loading = (props: Props) => {\r\n  const regression = useSelector((state: RootState) => state.Data.regression);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    // After the loading screen has shown:\r\n    let outputData = {\r\n      // perform regression:\r\n      values: regression?.calculate(),\r\n      // get the equation as latex\r\n      latexEquation:regression?.getLatex(),\r\n    }\r\n    // data to draw the regression line:\r\n    let regressionLineData = regression?.getRegressionLine();\r\n    dispatch({\r\n      type: \"setAppState\",\r\n      appState: {\r\n        showInput: false,\r\n        showLoading: false,\r\n        showOutput: true,\r\n      },\r\n    });\r\n    dispatch({type:\"setOutputData\",outputData:outputData})\r\n    dispatch({ type: \"setRegressionLineData\", regressionLineData: regressionLineData });\r\n    dispatch({ type: \"setRegression\", regression: regression });\r\n  }, []);\r\n  return (\r\n    <div className=\"flexStartVertically\">\r\n      <div className=\"flexAroundHorizontally\" style={{ margin: \"80px\" }}>\r\n        <ClimbingBoxLoader size={40} color={\"#009c95\"} />\r\n      </div>\r\n      <div className=\"flexAroundHorizontally\">\r\n        <Header color=\"grey\">Calculating ...</Header>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { RootState } from \"./store/store\";\n\nimport \"./App.css\";\n\n// Components:\nimport Input from \"./Components/Input\";\nimport Output from \"./Components/Output\";\nimport Loading from \"./Components/Loading\";\n\nimport { Header } from \"semantic-ui-react\";\n\ninterface Props {}\n\nconst App = (props: Props) => {\n  const showInput = useSelector((state: RootState) => state.AppState.showInput);\n  const showOutput = useSelector(\n    (state: RootState) => state.AppState.showOutput\n  );\n  const showLoading = useSelector(\n    (state: RootState) => state.AppState.showLoading\n  );\n\n  // useEffect(() => {\n  //   return () => {\n  //   }\n  // }, [showInput,showOutput,showLoading])\n\n  return (\n    <div>\n      {showInput ? <Input /> : <div />}\n      {showOutput ? <Output /> : <div />}\n      {showLoading ? <Loading /> : <div />}\n    </div>\n  );\n};\n\nexport default App;\n","import Regression from \"../Algorithms/Regression\";\r\n\r\ninterface output{\r\n  latexEquation:string,\r\n  values:number[]\r\n}\r\ninterface DataType {\r\n  inputData:number[][],\r\n  regression:Regression|undefined,\r\n  regressionLineData:number[][],\r\n  outputData:output,\r\n}\r\n\r\nconst initialData: DataType = {\r\n  inputData:[],\r\n  regressionLineData:[],\r\n  regression:undefined,\r\n  outputData:{\r\n    latexEquation:\"\",\r\n    values:[]\r\n  }\r\n};\r\n\r\nconst Data = (state = initialData, action: any): DataType => {\r\n  switch (action.type) {\r\n    case \"setInputData\":\r\n      return {\r\n        ...state,\r\n        inputData:action.inputData,\r\n      };\r\n    case \"setRegressionLineData\":\r\n      return {\r\n        ...state,\r\n        regressionLineData:action.regressionLineData,\r\n      }\r\n    case \"setRegression\":\r\n      return {\r\n        ...state,\r\n        regression:action.regression\r\n      }\r\n    case \"setOutputData\":\r\n      return {\r\n        ...state,\r\n        outputData:action.outputData\r\n      }\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\n\r\nexport default Data;\r\n","interface AppStateType {\r\n  showInput: boolean;\r\n  showOutput: boolean;\r\n  showLoading:boolean;\r\n}\r\n\r\nconst initialData: AppStateType = {\r\n  showInput: true,\r\n  showOutput: false,\r\n  showLoading:false,\r\n};\r\n\r\nconst Data = (state = initialData, action: any): AppStateType => {\r\n  switch (action.type) {\r\n    case \"setAppState\":\r\n      return action.appState;\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\n\r\nexport default Data;\r\n","import {combineReducers} from \"redux\"\r\n\r\nimport Data from \"./Data\"\r\nimport AppState from \"./AppState\"\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  Data:Data,\r\n  AppState:AppState,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport {Provider} from \"react-redux\"\nimport rootReducer from \"./store/store\";\nimport {createStore} from \"redux\";\n\nimport \"semantic-ui-css/semantic.min.css\"\n\nconst initalState = {}\nconst store = createStore(rootReducer,initalState);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}