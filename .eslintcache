[{"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\index.tsx":"1","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\store.ts":"2","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\App.tsx":"3","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\AppState.ts":"4","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\Data.ts":"5","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Output.tsx":"6","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Input.tsx":"7","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Loading.tsx":"8","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Algorithms\\Regression.ts":"9","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\HowItWorks.tsx":"10"},{"size":692,"mtime":1607807378818,"results":"11","hashOfConfig":"12"},{"size":274,"mtime":1607808153798,"results":"13","hashOfConfig":"12"},{"size":985,"mtime":1608154243950,"results":"14","hashOfConfig":"12"},{"size":451,"mtime":1608026052727,"results":"15","hashOfConfig":"12"},{"size":1072,"mtime":1608030650691,"results":"16","hashOfConfig":"12"},{"size":3496,"mtime":1608144607845,"results":"17","hashOfConfig":"12"},{"size":6766,"mtime":1608154194894,"results":"18","hashOfConfig":"12"},{"size":1546,"mtime":1608032613634,"results":"19","hashOfConfig":"12"},{"size":4889,"mtime":1608144942616,"results":"20","hashOfConfig":"12"},{"size":373,"mtime":1608154514862,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1xmc3n4",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\index.tsx",[],["46","47"],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\store.ts",[],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\App.tsx",[],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\AppState.ts",[],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\Data.ts",[],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Output.tsx",["48","49"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport Plotly from \"plotly.js-gl3d-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\n\r\nimport { BlockMath } from \"react-katex\";\r\nimport \"katex/dist/katex.min.css\";\r\n\r\nimport { RootState } from \"src/store/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Header } from \"semantic-ui-react\";\r\n\r\ninterface Props {}\r\n\r\nconst Output = (props: Props) => {\r\n  const [costSurface, setCostSurface] = useState<any[]>([]);\r\n  const [steps, setSteps] = useState<number[][]>([]);\r\n  useEffect(() => {\r\n    // start calucating the cost surface:\r\n    // cost surface:\r\n    let CS = regression?.calculateCostSurface();\r\n    // gradient descent path taken:\r\n    let s = regression?.getSteps();\r\n    if (CS !== undefined && s !== undefined) {\r\n      setCostSurface(CS);\r\n      setSteps(s);\r\n    }\r\n  }, []);\r\n  const Plot = createPlotlyComponent(Plotly);\r\n\r\n  const regressionLineData = useSelector(\r\n    (state: RootState) => state.Data.regressionLineData\r\n  );\r\n  const inputData = useSelector((state: RootState) => state.Data.inputData);\r\n  const outputData = useSelector((state: RootState) => state.Data.outputData);\r\n  const regression = useSelector((state: RootState) => state.Data.regression);\r\n\r\n  const PlotRef = useRef<HTMLDivElement>(null)\r\n\r\n  return (\r\n    <div className=\"flexStartVertically\">\r\n      <Plot\r\n        data={[\r\n          {\r\n            name: \"regression line\",\r\n            x: regressionLineData[0],\r\n            y: regressionLineData[1],\r\n            type: \"scatter\",\r\n            mode: \"lines\",\r\n            line: {\r\n              color: \"rgb(219, 64, 82)\",\r\n              width: 2,\r\n            },\r\n          },\r\n          {\r\n            name: \"data\",\r\n            type: \"scatter\",\r\n            x: inputData[0],\r\n            y: inputData[1],\r\n            mode: \"markers\",\r\n            marker: { color: \"green\" },\r\n          },\r\n        ]}\r\n        layout={{\r\n          // width:,\r\n          title: \"Data with regression\",\r\n        }}\r\n        config={{ staticPlot: true }}\r\n      />\r\n      <BlockMath>{outputData.latexEquation}</BlockMath>\r\n      <div className=\"flexAroundHorizontally\" >\r\n        <Header>\r\n          a = {outputData.values[0]} b = {outputData.values[1]}\r\n        </Header>\r\n      </div>\r\n      <div ref={PlotRef} style={{width:\"100%\"}} className=\"flexAroundHorizontally\">\r\n      {costSurface.length == 0 ? (\r\n        <div className = \"flexAroundHorizontally\" style={{width:\"100%\",height:\"auto\"}}>\r\n          {/* <ClimbingBoxLoader size={60} color={\"teal\"} /> */}\r\n        </div>\r\n      ) : (\r\n        <Plot\r\n          data={[\r\n            {\r\n              name: \"surface\",\r\n              x: costSurface[0],\r\n              y: costSurface[1],\r\n              z: costSurface[2],\r\n              type: \"surface\",\r\n              opacity: 0.5,\r\n\r\n            },\r\n            {\r\n              name:\"Path taken for gradient descent\",\r\n              type: \"scatter3d\",\r\n              mode: \"lines\",\r\n              x: steps[0],\r\n              y: steps[1],\r\n              z: steps[2],\r\n              line: {\r\n                color:\"teal\",\r\n                width: 9,\r\n              },\r\n            },\r\n          ]}\r\n          layout={{\r\n            title: \"Cost Surface\",\r\n            \"xaxis.title\": \"A\",\r\n            \"yaxis.title\": \"B\",\r\n          }}\r\n          style={{width:\"100%\",height:\"100%\"}}\r\n        />\r\n      )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Output;\r\n","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Input.tsx",["50"],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Loading.tsx",["51"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { RootState } from \"../store/store\";\r\n\r\ninterface Props {}\r\n\r\nconst Loading = (props: Props) => {\r\n  const regression = useSelector((state: RootState) => state.Data.regression);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    // After the loading screen has shown:\r\n    let outputData = {\r\n      // perform regression:\r\n      values: regression?.calculate(),\r\n      // get the equation as latex\r\n      latexEquation:regression?.getLatex(),\r\n    }\r\n    // data to draw the regression line:\r\n    let regressionLineData = regression?.getRegressionLine();\r\n    dispatch({\r\n      type: \"setAppState\",\r\n      appState: {\r\n        showInput: false,\r\n        showLoading: false,\r\n        showOutput: true,\r\n      },\r\n    });\r\n    dispatch({type:\"setOutputData\",outputData:outputData})\r\n    dispatch({ type: \"setRegressionLineData\", regressionLineData: regressionLineData });\r\n    dispatch({ type: \"setRegression\", regression: regression });\r\n  }, []);\r\n  return (\r\n    <div className=\"flexStartVertically\">\r\n      <div className=\"flexAroundHorizontally\" style={{ margin: \"80px\" }}>\r\n        <ClimbingBoxLoader size={40} color={\"#009c95\"} />\r\n      </div>\r\n      <div className=\"flexAroundHorizontally\">\r\n        <Header color=\"grey\">Calculating ...</Header>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Algorithms\\Regression.ts",["52"],"import { derivative, MathNode, parse } from \"mathjs\";\r\n\r\nclass Regression {\r\n  protected xValues: number[];\r\n  protected yValues: number[];\r\n  // x and y values\r\n  protected data: number[][];\r\n  // length of x/y\r\n  protected m: number;\r\n  protected iterations: number;\r\n  protected alpha: number;\r\n\r\n  // mathjs function, format that we are trying to achieve\r\n  protected function: MathNode;\r\n  protected functionString: string;\r\n\r\n  // parameter 1:a 2:b\r\n  protected a: number;\r\n  protected b: number;\r\n\r\n  // array of [a,b]\r\n  protected steps: number[][];\r\n\r\n  constructor(\r\n    functionString: string,\r\n    inputData: number[][],\r\n    alpha: number,\r\n    iterations: number,\r\n    starting: [number, number] = [0, 0]\r\n  ) {\r\n    console.log({ functionString, inputData, iterations, alpha });\r\n    // Function used: E.g. a*x +b\r\n    this.functionString = functionString;\r\n    this.xValues = inputData[0];\r\n    this.yValues = inputData[1];\r\n    this.m = inputData[0].length;\r\n    this.data = inputData;\r\n    this.a = starting[0];\r\n    this.b = starting[1];\r\n    this.iterations = iterations;\r\n    this.alpha = alpha;\r\n\r\n    this.steps = [];\r\n\r\n    // Parses the string function to a mathjs Mathnode\r\n    this.function = parse(functionString);\r\n  }\r\n\r\n  getSteps = (): number[][] => {\r\n    // returns the steps taken when performing gradient descent\r\n    let aCoord: number[] = [];\r\n    let bCoord: number[] = [];\r\n    let zCoord: number[] = [];\r\n    this.steps.forEach((step) => {\r\n      aCoord.push(step[0]);\r\n      bCoord.push(step[1]);\r\n      zCoord.push(this.cost(step[0], step[1]));\r\n    });\r\n    return [aCoord, bCoord, zCoord];\r\n  };\r\n\r\n  cost = (a: number, b: number): number => {\r\n    // evaluates the cost of using parameters a and b\r\n    let cost: number = 0;\r\n    // iterate through all the inputs values (x)\r\n    // sum the difference squared between the prediction and the actual value\r\n    for (let i = 0; i < this.xValues.length; i++) {\r\n      cost +=\r\n        (this.yValues[i] -\r\n          this.function.evaluate({ a: a, b: b, x: this.xValues[i] })) **\r\n        2;\r\n    }\r\n    return cost;\r\n  };\r\n\r\n  sumForAllXY = (f: MathNode, params: any) => {\r\n    // utility function to sum the output of any function for all values of x and y\r\n    let sum = 0;\r\n    for (let i = 0; i < this.xValues.length; i++) {\r\n      sum += f.evaluate({ ...params, x: this.xValues[i], y: this.yValues[i] });\r\n    }\r\n    return sum;\r\n  };\r\n  calculateCostSurface = () => {\r\n    // returns the cost surface\r\n    let aCoord = [];\r\n    let bCoord = [];\r\n    let zCoord = [];\r\n    let range = 5;\r\n    // need to iterate through b then a, becaause plotly selects y then x????\r\n    // iterate through b then a, and calculate the cost at that point\r\n    for (\r\n      let b = Math.round(this.b) - range;\r\n      b < Math.round(this.b) + range + 1;\r\n      b++\r\n    ) {\r\n      let row = [];\r\n      bCoord.push(b);\r\n      for (\r\n        let a = Math.round(this.a) - range;\r\n        a < Math.round(this.a) + range + 1;\r\n        a++\r\n      ) {\r\n        if (b == Math.round(this.b) - range) {\r\n          aCoord.push(a);\r\n        }\r\n        row.push(this.cost(a, b));\r\n      }\r\n      zCoord.push(row);\r\n    }\r\n    return [aCoord, bCoord, zCoord];\r\n  };\r\n\r\n  getRegressionLine = (): number[][] => {\r\n    // returns the regression line used with plotlyjs\r\n    // uses the values a and b, that were found when performing gradient descent\r\n    let xCoord: number[] = [];\r\n    let yCoord: number[] = [];\r\n    // iterate through values of x and calculate the prediction\r\n    this.xValues.forEach((x) => {\r\n      xCoord.push(x);\r\n      yCoord.push(this.function.evaluate({ a: this.a, b: this.b, x: x }));\r\n    });\r\n    return [xCoord, yCoord];\r\n  };\r\n\r\n  getLatex = (): string => {\r\n    // returns the input function as latex\r\n    return this.function.toTex();\r\n  };\r\n\r\n  calculate = (): number[] => {\r\n    // performs gradient descent\r\n    let absoluteDifference: MathNode = parse(\r\n      [\"((\", this.function.toString(), \"-y)^2)/2\"].join(\"\")\r\n    );\r\n    // aFucn: the partial differentiation with respect to a, used for each step of gradient descent\r\n    let aFunc: MathNode = derivative(absoluteDifference, \"a\");\r\n    // bFucn: the partial differentiation with respect to b, used for each step of gradient descent\r\n    let bFunc: MathNode = derivative(absoluteDifference, \"b\");\r\n    console.log(aFunc.toString());\r\n    console.log(bFunc.toString());\r\n\r\n    for (let i = 0; i < this.iterations; i++) {\r\n      this.a -=\r\n        this.alpha *\r\n        (1 / this.m) *\r\n        this.sumForAllXY(aFunc, { a: this.a, b: this.b });\r\n      this.b -=\r\n        this.alpha *\r\n        (1 / this.m) *\r\n        this.sumForAllXY(bFunc, { a: this.a, b: this.b });\r\n      this.steps.push([this.a, this.b]);\r\n    }\r\n\r\n    return [Math.round(this.a * 100) / 100, Math.round(this.b * 100) / 100];\r\n  };\r\n}\r\n\r\nexport default Regression;\r\n","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\HowItWorks.tsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":28,"column":6,"nodeType":"59","endLine":28,"endColumn":8,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":77,"column":27,"nodeType":"63","messageId":"64","endLine":77,"endColumn":29},{"ruleId":"65","severity":1,"message":"66","line":22,"column":31,"nodeType":"67","messageId":"64","endLine":22,"endColumn":40},{"ruleId":"57","severity":1,"message":"68","line":33,"column":6,"nodeType":"59","endLine":33,"endColumn":8,"suggestions":"69"},{"ruleId":"61","severity":1,"message":"62","line":104,"column":15,"nodeType":"63","messageId":"64","endLine":104,"endColumn":17},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'regression'. Either include it or remove the dependency array.","ArrayExpression",["72"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","React Hook useEffect has missing dependencies: 'dispatch' and 'regression'. Either include them or remove the dependency array.",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [regression]",{"range":"78","text":"79"},"Update the dependencies array to be: [dispatch, regression]",{"range":"80","text":"81"},[879,881],"[regression]",[1171,1173],"[dispatch, regression]"]