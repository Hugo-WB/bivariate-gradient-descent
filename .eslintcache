[{"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\index.tsx":"1","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\store.ts":"2","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\App.tsx":"3","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\AppState.ts":"4","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\Data.ts":"5","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Output.tsx":"6","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Input.tsx":"7","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Loading.tsx":"8","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Algorithms\\Regression.ts":"9"},{"size":692,"mtime":1607807378818,"results":"10","hashOfConfig":"11"},{"size":274,"mtime":1607808153798,"results":"12","hashOfConfig":"11"},{"size":952,"mtime":1607984780488,"results":"13","hashOfConfig":"11"},{"size":451,"mtime":1608026052727,"results":"14","hashOfConfig":"11"},{"size":1072,"mtime":1608030650691,"results":"15","hashOfConfig":"11"},{"size":3614,"mtime":1608040029828,"results":"16","hashOfConfig":"11"},{"size":6665,"mtime":1608044178095,"results":"17","hashOfConfig":"11"},{"size":1546,"mtime":1608032613634,"results":"18","hashOfConfig":"11"},{"size":4148,"mtime":1608040844304,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1xmc3n4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\index.tsx",[],["44","45"],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\store.ts",[],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\App.tsx",["46","47","48"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { RootState } from \"./store/store\";\n\nimport \"./App.css\";\n\n// Components:\nimport Input from \"./Components/Input\";\nimport Output from \"./Components/Output\";\nimport Loading from \"./Components/Loading\";\n\nimport { Header } from \"semantic-ui-react\";\n\ninterface Props {}\n\nconst App = (props: Props) => {\n  const showInput = useSelector((state: RootState) => state.AppState.showInput);\n  const showOutput = useSelector(\n    (state: RootState) => state.AppState.showOutput\n  );\n  const showLoading = useSelector(\n    (state: RootState) => state.AppState.showLoading\n  );\n\n  // useEffect(() => {\n  //   return () => {\n  //   }\n  // }, [showInput,showOutput,showLoading])\n\n  return (\n    <div>\n      {showInput ? <Input /> : <div />}\n      {showOutput ? <Output /> : <div />}\n      {showLoading ? <Loading /> : <div />}\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\AppState.ts",[],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\store\\Data.ts",[],"C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Output.tsx",["49","50","51","52","53","54","55"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport Plotly from \"plotly.js-gl3d-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\n\r\nimport { InlineMath, BlockMath } from \"react-katex\";\r\nimport \"katex/dist/katex.min.css\";\r\n\r\nimport { RootState } from \"src/store/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { CircleLoader, ClimbingBoxLoader } from \"react-spinners\";\r\n\r\ninterface Props {}\r\n\r\nconst Output = (props: Props) => {\r\n  const [costSurface, setCostSurface] = useState<any[]>([]);\r\n  const [steps, setSteps] = useState<number[][]>([]);\r\n  useEffect(() => {\r\n    console.log(\"calculating cost surface...\");\r\n    let CS = regression?.calculateCostSurface();\r\n    let s = regression?.getSteps();\r\n    if (CS != undefined && s != undefined) {\r\n      console.log({ CS, s });\r\n      setCostSurface(CS);\r\n      setSteps(s);\r\n    }\r\n    // PlotRef?.current?.scrollIntoView({behavior:\"smooth\"});\r\n  }, []);\r\n  const Plot = createPlotlyComponent(Plotly);\r\n\r\n  const regressionLineData = useSelector(\r\n    (state: RootState) => state.Data.regressionLineData\r\n  );\r\n  const inputData = useSelector((state: RootState) => state.Data.inputData);\r\n  const outputData = useSelector((state: RootState) => state.Data.outputData);\r\n  const regression = useSelector((state: RootState) => state.Data.regression);\r\n\r\n  const PlotRef = useRef<HTMLDivElement>(null)\r\n\r\n  return (\r\n    <div className=\"flexStartVertically\">\r\n      <Plot\r\n        data={[\r\n          {\r\n            name: \"regression line\",\r\n            x: regressionLineData[0],\r\n            y: regressionLineData[1],\r\n            type: \"scatter\",\r\n            mode: \"lines\",\r\n            line: {\r\n              color: \"rgb(219, 64, 82)\",\r\n              width: 2,\r\n            },\r\n          },\r\n          {\r\n            name: \"data\",\r\n            type: \"scatter\",\r\n            x: inputData[0],\r\n            y: inputData[1],\r\n            mode: \"markers\",\r\n            marker: { color: \"green\" },\r\n          },\r\n        ]}\r\n        layout={{\r\n          // width:,\r\n          title: \"Data with regression\",\r\n        }}\r\n        config={{ staticPlot: true }}\r\n      />\r\n      <BlockMath>{outputData.latexEquation}</BlockMath>\r\n      <div className=\"flexAroundHorizontally\" >\r\n        <Header>\r\n          a = {outputData.values[0]} b = {outputData.values[1]}\r\n        </Header>\r\n      </div>\r\n      <div ref={PlotRef} style={{width:\"100%\"}} className=\"flexAroundHorizontally\">\r\n      {costSurface.length == 0 ? (\r\n        <div className = \"flexAroundHorizontally\" style={{width:\"100%\",height:\"auto\"}}>\r\n          {/* <ClimbingBoxLoader size={60} color={\"teal\"} /> */}\r\n        </div>\r\n      ) : (\r\n        <Plot\r\n          data={[\r\n            {\r\n              name: \"surface\",\r\n              x: costSurface[0],\r\n              y: costSurface[1],\r\n              z: costSurface[2],\r\n              type: \"surface\",\r\n              opacity: 0.5,\r\n\r\n            },\r\n            {\r\n              name:\"Path taken for gradient descent\",\r\n              type: \"scatter3d\",\r\n              mode: \"lines\",\r\n              x: steps[0],\r\n              y: steps[1],\r\n              z: steps[2],\r\n              line: {\r\n                color:\"teal\",\r\n                width: 9,\r\n              },\r\n            },\r\n          ]}\r\n          layout={{\r\n            title: \"Cost Surface\",\r\n            \"xaxis.title\": \"A\",\r\n            \"yaxis.title\": \"B\",\r\n          }}\r\n          style={{width:\"100%\",height:\"100%\"}}\r\n        />\r\n      )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Output;\r\n","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Input.tsx",["56","57","58","59","60","61"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { ReactElement, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  Container,\r\n  Dropdown,\r\n  DropdownItemProps,\r\n  Header,\r\n  Message,\r\n  Input as InputSemantic,\r\n  Checkbox,\r\n} from \"semantic-ui-react\";\r\n\r\nimport Regression from \"../Algorithms/Regression\";\r\nimport { RootState } from \"../store/store\";\r\n\r\nimport \"./Input.css\";\r\n\r\n\r\nimport { parse } from \"mathjs\";\r\n\r\ninterface Props {}\r\n\r\nexport default function Input({}: Props): ReactElement {\r\n  const regressionTypes: DropdownItemProps[] = [\r\n    { text: \"Linear\", value: \"(a*x)+b\" },\r\n    { text: \"Exponential\", value: \"a*(b^x)\" },\r\n    { text: \"Quadratic\", value: \"(a*(x^2)) + b\" },\r\n    { text: \"Custom\", value: \"Custom\" },\r\n    // { text: \"Logarithmic\",va},\r\n  ];\r\n  const typesToOptions: { [key: string]: any } = {\r\n    Linear: { alpha: \"0.01\", iterations: \"3000\" },\r\n    Exponential: { alpha: \"0.005\", iterations: \"4000\" },\r\n    Quadratic: { alpha: \"0.005\", iterations: \"4000\" },\r\n    Custom: { alpha: \"0.001\", iterations: '5000' },\r\n  };\r\n\r\n  const textAreaPlaceholder: string = \"x followed by y: \\n0,1,2,3,4,5\\n0,1,2,3,4,5\";\r\n  // redux dispatch:\r\n  const dispatch = useDispatch();\r\n  // text area text:\r\n  let [text, setText] = useState<string>(\"\");\r\n  let [error, setError] = useState<string>(\"\");\r\n  let [regressionEquation, setRegressionEquation] = useState<string>(\"(a*x)+b\");\r\n  let [options, setOptions] = useState({\r\n    alpha: typesToOptions[\"Linear\"].alpha,\r\n    iterations: typesToOptions[\"Linear\"].iterations,\r\n  });\r\n  let [starting, setStarting] = useState<[string, string]>([\"0\", \"0\"]);\r\n  let [showAdvanced,setShowAdvanced] = useState<boolean>(false);\r\n  let [custom,setCustom] = useState<boolean>(false)\r\n\r\n  let handleTextAreaChange = (event: any) => {\r\n    setText(event.target.value);\r\n  };\r\n  let handleDropdown = (event: any, data: any) => {\r\n    if (event.target.textContent === \"Custom\"){\r\n      setCustom(true)\r\n      setRegressionEquation(\"\");\r\n    }else{\r\n      setRegressionEquation(data.value);\r\n      setCustom(false)\r\n    }\r\n    setOptions(typesToOptions[event.target.textContent]);\r\n  };\r\n  let handleOptions = (event: any, data: any) => {\r\n    console.log({ event, data });\r\n    switch (data.label) {\r\n      case \"Starting A\":\r\n        setStarting([data.value, starting[1]]);\r\n        break;\r\n      case \"Starting B\":\r\n        setStarting([starting[0], data.value]);\r\n        break;\r\n      case \"alpha\":\r\n        setOptions({ ...options, alpha: data.value });\r\n        break;\r\n      case \"iterations\":\r\n        setOptions({ ...options, iterations: data.value });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  let calculate = async () => {\r\n    // Formatting + Input checking:\r\n    let formattedInput: number[][] = formatInput(text);\r\n    if (formattedInput.length !== 2) {\r\n      setError(\"Invalid Input, Please try again\");\r\n      return;\r\n    }\r\n    if (formattedInput[0].length !== formattedInput[1].length) {\r\n      setError(\"Make sure length of x and y are the same! Please try again\");\r\n      return;\r\n    }\r\n    try {\r\n      parseInt(options.iterations)\r\n      Number(options.alpha)\r\n      Number(starting[0])\r\n      Number(starting[1])\r\n    } catch (error) {\r\n      setError(\"Invalid Input, Please try again\");\r\n      return;\r\n    }\r\n    try{\r\n      parse(regressionEquation)\r\n    }catch(error){\r\n      setError(\"Invalid Custom function\")\r\n      return\r\n    }\r\n    // show loading screen\r\n    dispatch({\r\n      type: \"setAppState\",\r\n      appState: {\r\n        showInput: false,\r\n        showLoading: true,\r\n        showOutput: false,\r\n      },\r\n    });\r\n    // intialize regression class with all the options\r\n    let regression: Regression = new Regression(\r\n      regressionEquation,\r\n      formattedInput,\r\n      Number(options.alpha),\r\n      Number(options.iterations),\r\n      [Number(starting[0]),Number(starting[1])]\r\n    );\r\n    dispatch({ type: \"setInputData\", inputData: formattedInput });\r\n    dispatch({\r\n      type: \"setRegression\",\r\n      regression: regression,\r\n    });\r\n  };\r\n\r\n  let formatInput = (input: string): number[][] => {\r\n    try {\r\n      // split string by \\n to get an array of lines\r\n      let lines = input.split(\"\\n\");\r\n      let numberLines = lines.map((line) => {\r\n        // Split line by commas\r\n        let splitLine = line.split(\",\");\r\n        // convert each value from a string to a number\r\n        let numberLine = splitLine.map((number) => parseFloat(number));\r\n        return numberLine;\r\n      });\r\n      return numberLines;\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flexStartVertically\">\r\n      <div className=\"flexAroundHorizontally\" style={{maxWidth:\"1000px\"}} id=\"inputs\">\r\n        <Dropdown\r\n          fluid\r\n          selection\r\n          options={regressionTypes}\r\n          onChange={handleDropdown}\r\n          // set linear as default\r\n          defaultValue=\"(a*x)+b\"\r\n          style={{minWidth:\"200px\"}}\r\n        />\r\n        <Checkbox label = \"Show advanced settings\" checked = {showAdvanced} onClick = {()=>setShowAdvanced(!showAdvanced)}/>\r\n        {showAdvanced?(<div>\r\n        <InputSemantic\r\n          label=\"alpha\"\r\n          value={options.alpha}\r\n          onChange={handleOptions}\r\n          size={\"small\"}\r\n        />\r\n        <InputSemantic\r\n          label=\"iterations\"\r\n          value={options.iterations}\r\n          onChange={handleOptions}\r\n        />\r\n        <InputSemantic\r\n          label=\"Starting A\"\r\n          value={starting[0]}\r\n          onChange={handleOptions}\r\n        />\r\n        <InputSemantic\r\n          label=\"Starting B\"\r\n          value={starting[1]}\r\n          onChange={handleOptions}\r\n        />\r\n\r\n        </div>):<div/>}\r\n      </div>\r\n      <div className=\"flexAroundHorizontally\">\r\n        <InputSemantic label={custom?\"Custom Equation\":\"Equation\"} placeholder=\"(a*x) + b\" onChange={(event,data)=>setRegressionEquation(data.value)} value={regressionEquation} disabled={!custom} />\r\n      </div>\r\n      <div className=\"flexAroundHorizontally\">\r\n        <textarea\r\n          placeholder={textAreaPlaceholder}\r\n          value={text}\r\n          onChange={handleTextAreaChange}\r\n        />\r\n      </div>\r\n      {error === \"\" ? (\r\n        <div />\r\n      ) : (\r\n        <div className=\"flexAroundHorizontally\">\r\n          <Message error>{error}</Message>\r\n        </div>\r\n      )}\r\n      <div className=\"flexAroundHorizontally buttonContainer\">\r\n        <Button color=\"teal\" onClick={calculate}>\r\n          Calculate\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Components\\Loading.tsx",["62"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { RootState } from \"../store/store\";\r\n\r\ninterface Props {}\r\n\r\nconst Loading = (props: Props) => {\r\n  const regression = useSelector((state: RootState) => state.Data.regression);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    // After the loading screen has shown:\r\n    let outputData = {\r\n      // perform regression:\r\n      values: regression?.calculate(),\r\n      // get the equation as latex\r\n      latexEquation:regression?.getLatex(),\r\n    }\r\n    // data to draw the regression line:\r\n    let regressionLineData = regression?.getRegressionLine();\r\n    dispatch({\r\n      type: \"setAppState\",\r\n      appState: {\r\n        showInput: false,\r\n        showLoading: false,\r\n        showOutput: true,\r\n      },\r\n    });\r\n    dispatch({type:\"setOutputData\",outputData:outputData})\r\n    dispatch({ type: \"setRegressionLineData\", regressionLineData: regressionLineData });\r\n    dispatch({ type: \"setRegression\", regression: regression });\r\n  }, []);\r\n  return (\r\n    <div className=\"flexStartVertically\">\r\n      <div className=\"flexAroundHorizontally\" style={{ margin: \"80px\" }}>\r\n        <ClimbingBoxLoader size={40} color={\"#009c95\"} />\r\n      </div>\r\n      <div className=\"flexAroundHorizontally\">\r\n        <Header color=\"grey\">Calculating ...</Header>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","C:\\Users\\hugo6\\Documents\\Coding\\ReactJS\\bivariate-gradient-descent\\src\\Algorithms\\Regression.ts",["63"],"import { derivative, MathNode, parse } from \"mathjs\";\r\n\r\nclass Regression {\r\n  protected xValues: number[];\r\n  protected yValues: number[];\r\n  // x and y values\r\n  protected data: number[][];\r\n  // length of x/y\r\n  protected m: number;\r\n  protected iterations: number;\r\n  protected alpha: number;\r\n\r\n  // mathjs function, format that we are trying to achieve\r\n  protected function: MathNode;\r\n  protected functionString: string;\r\n\r\n  // parameter 1:a 2:b\r\n  protected a: number;\r\n  protected b: number;\r\n\r\n  // array of [a,b]\r\n  protected steps: number[][];\r\n\r\n  constructor(\r\n    functionString: string,\r\n    inputData: number[][],\r\n    alpha: number,\r\n    iterations: number,\r\n    starting:[number,number]=[0,0]\r\n  ) {\r\n    console.log({ functionString, inputData, iterations, alpha });\r\n    // Function used: E.g. a*x +b\r\n    this.functionString = functionString;\r\n    this.xValues = inputData[0];\r\n    this.yValues = inputData[1];\r\n    this.m = inputData[0].length;\r\n    this.data = inputData;\r\n    this.a = starting[0];\r\n    this.b = starting[1];\r\n    this.iterations = iterations;\r\n    this.alpha = alpha;\r\n\r\n    this.steps = [];\r\n\r\n    // Parses the string function to a mathjs Mathnode\r\n    this.function = parse(functionString);\r\n  }\r\n\r\n  getSteps = ():number[][] =>{\r\n    let aCoord:number[] = []\r\n    let bCoord:number[] = []\r\n    let zCoord:number[] = []\r\n    this.steps.forEach(step => {\r\n      aCoord.push(step[0])\r\n      bCoord.push(step[1])\r\n      zCoord.push(this.cost(step[0],step[1]))\r\n    });\r\n    return [aCoord,bCoord,zCoord]\r\n  }\r\n\r\n  // evaluates the cost of using parameters a and b\r\n  cost = (a: number, b: number):number => {\r\n    let cost: number = 0;\r\n    for (let i = 0; i < this.xValues.length; i++) {\r\n      cost +=\r\n        (this.yValues[i] -\r\n          this.function.evaluate({ a: a, b: b, x: this.xValues[i] })) **\r\n        2;\r\n    }\r\n    return cost;\r\n  };\r\n\r\n  sumForAllXY = (f: MathNode, params: any) => {\r\n    let sum = 0;\r\n    for (let i = 0; i < this.xValues.length; i++) {\r\n      sum += f.evaluate({ ...params, x: this.xValues[i], y: this.yValues[i] });\r\n    }\r\n    return sum;\r\n  };\r\n  calculateCostSurface = () => {\r\n    let aCoord = [];\r\n    let bCoord = [];\r\n    let zCoord = [];\r\n    let range = 5\r\n    // need to iterate through b then a, becaause plotly selects y then x????\r\n    for (\r\n      let b = Math.round(this.b)-range;\r\n      b < Math.round(this.b) + range + 1;\r\n      b++\r\n    ) {\r\n      let row = []\r\n      bCoord.push(b);\r\n      for (\r\n        let a = Math.round(this.a) - range;\r\n        a < Math.round(this.a)+range + 1;\r\n        a++\r\n      ) {\r\n        if (b==Math.round(this.b)-range){\r\n          aCoord.push(a);\r\n        }\r\n        row.push(this.cost(a, b));\r\n        // zCoord.push(this.cost(a,b))\r\n      }\r\n      zCoord.push(row)\r\n    }\r\n    return [aCoord, bCoord, zCoord];\r\n  };\r\n  getRegressionLine = (): number[][] => {\r\n    let xCoord:number[] = [];\r\n    let yCoord:number[] = [];\r\n    this.xValues.forEach(x => {\r\n      xCoord.push(x);\r\n      yCoord.push(this.function.evaluate({ a:this.a,b:this.b,x: x }));\r\n    });\r\n    return [xCoord, yCoord];\r\n  };\r\n  getLatex = ():string => {\r\n    return this.function.toTex();\r\n  }\r\n  calculate = (): number[] => {\r\n    let absoluteDifference: MathNode = parse(\r\n      [\"((\", this.function.toString(), \"-y)^2)/2\"].join(\"\")\r\n    );\r\n    let aFunc: MathNode = derivative(absoluteDifference, \"a\");\r\n    let bFunc: MathNode = derivative(absoluteDifference, \"b\");\r\n    console.log(aFunc.toString());\r\n    console.log(bFunc.toString());\r\n\r\n    for (let i = 0; i < this.iterations; i++) {\r\n      // console.log(this.cost(this.a,this.b))\r\n      // console.log(this.a,this.b)\r\n      this.a -=\r\n        this.alpha *\r\n        (1 / this.m) *\r\n        this.sumForAllXY(aFunc, { a: this.a, b: this.b });\r\n      this.b -=\r\n        this.alpha *\r\n        (1 / this.m) *\r\n        this.sumForAllXY(bFunc, { a: this.a, b: this.b });\r\n      this.steps.push([this.a, this.b]);\r\n    }\r\n    console.log(this.steps)\r\n    console.log(this.a, this.b);\r\n    return [Math.round(this.a*100)/100, Math.round(this.b*100)/100];\r\n  };\r\n}\r\n\r\nexport default Regression;\r\n",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"68","severity":1,"message":"72","line":1,"column":28,"nodeType":"70","messageId":"71","endLine":1,"endColumn":36},{"ruleId":"68","severity":1,"message":"73","line":13,"column":10,"nodeType":"70","messageId":"71","endLine":13,"endColumn":16},{"ruleId":"68","severity":1,"message":"74","line":6,"column":10,"nodeType":"70","messageId":"71","endLine":6,"endColumn":20},{"ruleId":"68","severity":1,"message":"75","line":12,"column":10,"nodeType":"70","messageId":"71","endLine":12,"endColumn":22},{"ruleId":"68","severity":1,"message":"76","line":12,"column":24,"nodeType":"70","messageId":"71","endLine":12,"endColumn":41},{"ruleId":"77","severity":1,"message":"78","line":23,"column":12,"nodeType":"79","messageId":"80","endLine":23,"endColumn":14},{"ruleId":"77","severity":1,"message":"78","line":23,"column":30,"nodeType":"79","messageId":"80","endLine":23,"endColumn":32},{"ruleId":"81","severity":1,"message":"82","line":29,"column":6,"nodeType":"83","endLine":29,"endColumn":8,"suggestions":"84"},{"ruleId":"77","severity":1,"message":"85","line":78,"column":27,"nodeType":"79","messageId":"80","endLine":78,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":2,"column":31,"nodeType":"70","messageId":"71","endLine":2,"endColumn":40},{"ruleId":"68","severity":1,"message":"86","line":3,"column":23,"nodeType":"70","messageId":"71","endLine":3,"endColumn":34},{"ruleId":"68","severity":1,"message":"87","line":6,"column":3,"nodeType":"70","messageId":"71","endLine":6,"endColumn":12},{"ruleId":"68","severity":1,"message":"73","line":9,"column":3,"nodeType":"70","messageId":"71","endLine":9,"endColumn":9},{"ruleId":"68","severity":1,"message":"88","line":16,"column":10,"nodeType":"70","messageId":"71","endLine":16,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":25,"column":31,"nodeType":"91","messageId":"80","endLine":25,"endColumn":40},{"ruleId":"81","severity":1,"message":"92","line":33,"column":6,"nodeType":"83","endLine":33,"endColumn":8,"suggestions":"93"},{"ruleId":"77","severity":1,"message":"85","line":98,"column":14,"nodeType":"79","messageId":"80","endLine":98,"endColumn":16},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Header' is defined but never used.","'InlineMath' is defined but never used.","'CircleLoader' is defined but never used.","'ClimbingBoxLoader' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'regression'. Either include it or remove the dependency array.","ArrayExpression",["96"],"Expected '===' and instead saw '=='.","'useSelector' is defined but never used.","'Container' is defined but never used.","'RootState' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","React Hook useEffect has missing dependencies: 'dispatch' and 'regression'. Either include them or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [regression]",{"range":"102","text":"103"},"Update the dependencies array to be: [dispatch, regression]",{"range":"104","text":"105"},[997,999],"[regression]",[1171,1173],"[dispatch, regression]"]